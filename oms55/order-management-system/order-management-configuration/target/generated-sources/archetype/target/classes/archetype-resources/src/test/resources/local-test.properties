#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} DATA SOURCE PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 

${symbol_pound}${symbol_pound} mysql
${symbol_pound}dataSource.driverClass=com.mysql.jdbc.Driver
${symbol_pound}dataSource.jdbcUrl=jdbc:mysql://localhost:3306/oms?useConfigs=maxPerformance&characterEncoding=utf8&sessionVariables=storage_engine=InnoDB&zeroDateTimeBehavior=convertToNull
${symbol_pound}dataSource.username=root
${symbol_pound}dataSource.password=admin

${symbol_pound}${symbol_pound} hsqldb
${symbol_pound} Fully qualified name of the JDBC driver class used to access the database
dataSource.driverClass=org.hsqldb.jdbcDriver
${symbol_pound} JDBC connection URL
dataSource.jdbcUrl=jdbc:hsqldb:mem:testDB
${symbol_pound} Username to use for connection
dataSource.username=sa
${symbol_pound} Password to use for connection
dataSource.password=

${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound} MONGODB PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} Mongo database name
persistence.engine.mongodb.databaseName=oms-test

${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound} KERNEL PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} Name of tenant which will be initialized during startup with property kernel.autoInitMode "create" or "create-drop"
${symbol_pound} Tenant name for single tenant configuration.
kernel.defaultTenant=single
${symbol_pound} Enables/Disables one tenant configuration (true/false), for single tenant property kernel.defaultTenant is required (true/false)
kernel.singleTenantMode=true

${symbol_pound} Defines how system should be initialized
${symbol_pound}     Possible values:
${symbol_pound}       - ignore      : (recommended) No check during startup. Use init-app to initialize/update system
${symbol_pound}       - create      : Will initialize system if not initialized or fail when not up to date.
${symbol_pound}       - update      : Will initialize system if not initialized or update when not up to date.
${symbol_pound}       - create-drop : Will drop schema (and ALL DATA) and then initialize system from scratch again.
kernel.autoInitMode=create-drop

${symbol_pound} regular expression path to essential data. Separate different paths by ','
kernel.essentialDataPath=/META-INF/doNotLoadAnything-*

${symbol_pound} Enables/disables automatic flush invocation before query (true/false)
kernel.flushBeforeQuery=false

${symbol_pound} Enables/Disables kernel cache (true/false)
kernel.cacheEnabled=false

${symbol_pound} Time to wait for archived values of objects modified during aggregation (in ms)
kernel.aggregation.waitForArchive=3000
${symbol_pound} Delay before live aggregation starts (in ms)
kernel.aggregation.synchronizationDelay=3000

${symbol_pound} JGroups channel configuration
${symbol_pound}     Possible values:
${symbol_pound}          disable, skip   - skips configuration
${symbol_pound}          enable, default - default configuration
${symbol_pound}          <configuration string> - see jgroups documentation
kernel.events.cluster.jgroups.channel=disable

${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound} OMS PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 

${symbol_pound} Use low query limits when polling in tests
oms.export.ats.poll.limit=10
oms.export.ats.poll.maxlimit=10

${symbol_pound} Enables/disables the mock use for the CIS communications (true/false)
oms.business.test.enableMock=true
${symbol_pound} Client property for read timeout (in ms)
com.sun.jersey.client.property.readTimeout=10000
${symbol_pound} Database type to be used by Activiti
${symbol_pound}     Supported values: h2, mysql, oracle, mssql
oms.activiti.databaseType=h2

${symbol_pound} Do as little as possible in terms of retries for testing.
oms.activiti.retry.numRetries=1
oms.activiti.retry.waitTimeInMillis=100
oms.activiti.retry.backoffMultiplier=1
oms.activiti.retry.policyEnabled=false

${symbol_pound} Activates ATS filtering by setting values for the atsFormulasFilter and locationsFilter properties
${symbol_pound} in ServiceProviderMock.
${symbol_pound} When the property oms.business.test.mock.atsFilters is true, ServiceProviderMock sets values for
${symbol_pound} the ATS filters ( atsFormulasFilter and locationsFilter)
oms.business.test.mock.atsFilters=true

${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound} PROVIDER PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} the zookeeper ensemble to connect to in the pattern: <host>:<port>(,<host>:<port>)* ==> eg: 127.0.0.1:2181
zookeeper.ensemble=localhost
${symbol_pound} Gateway base uri to use
hybris.gateway.uri=http://localhost:8080/serviceprovider-gateway/
${symbol_pound} Name of the current service
hybris.service.name=oms
${symbol_pound} Api key for creating signature
hybris.security.apiKey=myKey